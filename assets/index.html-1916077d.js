import{_ as o,r as d,o as r,c,a as e,b as a,w as i,d as t,e as l}from"./app-c1c3c937.js";const u={},m=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),t(" 目录")],-1),b={class:"table-of-contents"},v=l(`<h2 id="一、-efcore数据库迁移命令" tabindex="-1"><a class="header-anchor" href="#一、-efcore数据库迁移命令" aria-hidden="true">#</a> 一、 EFCore数据库迁移命令</h2><h2 id="dotnet-安装-cli" tabindex="-1"><a class="header-anchor" href="#dotnet-安装-cli" aria-hidden="true">#</a> dotnet 安装 CLI</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet tool <span class="token function">install</span> <span class="token parameter variable">--global</span> dotnet-ef <span class="token parameter variable">--version</span> <span class="token number">5.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),f={href:"https://blog.csdn.net/az44yao/article/details/111399857",target:"_blank",rel:"noopener noreferrer"},g=l(`<div class="custom-container tip"><p class="custom-container-title">前言</p><p>因为现在用.net core 开发新项目，过程中需要经常涉及到数据命令的迁移，今天分别整EFCore 的两种迁移数据库的方式</p><blockquote><p>1 程序包管理器控制台 , Package Manager Console（PMC）</p></blockquote><blockquote><blockquote><p>如果你用visual studio 开发建议使用PMC迁移方式，该方式是同时支持efcore和原先的ef 迁移的</p></blockquote></blockquote><blockquote><p>2 命令行工具 ,Command line interface (CLI)</p></blockquote><blockquote><blockquote><p>该方式适用于跨平台开发的时候进行迁移数据库的，也就是可脱离visual studio，比如你用vs code，或直接打开cmd控制台进行操作</p></blockquote></blockquote></div><h3 id="下面先列出两种方式对比-然后再分用vs-和vscode分别详细说明" tabindex="-1"><a class="header-anchor" href="#下面先列出两种方式对比-然后再分用vs-和vscode分别详细说明" aria-hidden="true">#</a> 下面先列出两种方式对比，然后再分用vs 和vscode分别详细说明</h3><table><thead><tr><th style="text-align:left;">迁移命令描述</th><th style="text-align:left;">CLI命令</th><th style="text-align:left;">PMC命令</th></tr></thead><tbody><tr><td style="text-align:left;">创建迁移：migrationName为迁移名称</td><td style="text-align:left;">dotnet ef migrations add migrationName</td><td style="text-align:left;">add-migration migrationName</td></tr><tr><td style="text-align:left;">移除迁移（删除最近的一次迁移）</td><td style="text-align:left;">dotnet ef migrations remove</td><td style="text-align:left;">remove-migration</td></tr><tr><td style="text-align:left;">应用所有的迁移（使迁移文件应用到数据库）</td><td style="text-align:left;">dotnet ef database update</td><td style="text-align:left;">update-database</td></tr><tr><td style="text-align:left;">指定版本进行迁移</td><td style="text-align:left;">dotnet ef database update migrationName</td><td style="text-align:left;">update-database migrationName</td></tr><tr><td style="text-align:left;">生成对应版本的脚本</td><td style="text-align:left;">dotnet ef migrations script</td><td style="text-align:left;">script-migration</td></tr><tr><td style="text-align:left;">查看迁移列表</td><td style="text-align:left;">dotnet ef migrations list</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">查看数据库上下文信息</td><td style="text-align:left;">dotnet ef dbcontext info</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_1、-安装-donet-tool-工具" tabindex="-1"><a class="header-anchor" href="#_1、-安装-donet-tool-工具" aria-hidden="true">#</a> 1、 安装 donet tool 工具</h2><div class="custom-container tip"><p class="custom-container-title">LKN.EBusiness.EntityFrameworkCore 数据迁移</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  dotnet tool install --global dotnet-ef
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="_2-跨平台命令行工具-command-line-interface-cli" tabindex="-1"><a class="header-anchor" href="#_2-跨平台命令行工具-command-line-interface-cli" aria-hidden="true">#</a> 2. 跨平台命令行工具 ,Command line interface (CLI)</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet ef migrations <span class="token function">add</span>  生成一条迁移
dotnet ef migrations remove  删除最新一次迁移
dotnet ef  database  update 生成迁移到数据库，跟上面pmc命令类似 后面加指定的迁移作为参数可以进行版本的回滚
dotnet ef migrations script   也跟pmc类似  如果没有任何参数的话默认是生成所有sql脚本，
但是参数格式略有不同如下：dotnet ef migrations script migrationName1  migrationName2 <span class="token punctuation">;</span>
是像这样直接跟迁移名称的也就是生成migrationName1 到migrationName2 的sql脚本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、ef-反向工程生成-model" tabindex="-1"><a class="header-anchor" href="#二、ef-反向工程生成-model" aria-hidden="true">#</a> 二、EF 反向工程生成 Model</h2><div class="custom-container tip"><p class="custom-container-title">依赖包引用</p><pre><code>Pomelo.EntityFrameworkCore.MySql
</code></pre></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、反向所有表
   dotnet ef dbcontext  scaffold &quot;Server=..;Port=3306;Database=...;Uid=root;Pwd=...;&quot;  Pomelo.EntityFrameworkCore.MySql
2、反向指定一张表或多张表（--table a --table b ）
   dotnet ef dbcontext  scaffold &quot;Server=..;Port=3306;Database=...;Uid=root;Pwd=...;&quot;  Pomelo.EntityFrameworkCore.MySql --table 表名称
3、反向表名根实体类一样  --use-database-names
    dotnet ef dbcontext  scaffold &quot;Server=..;Port=3306;Database=...;Uid=root;Pwd=...;&quot;  Pomelo.EntityFrameworkCore.MySql --use-database-names
4、Dbcontext名称
    默认情况下，已搭建基架构的DbContext类名称将是后缀为Context的数据库名称。若要指定不同名称，请在PMC中使用-Context,在.Net Core CLI 中使用--context
5、目录和命名空间
   实体类和DbContext类将搭建到项目的根目录中，并使项目的默认命名空间。
   .NET CLI
    可使用--output-dir 指定在其中为类搭建基架的目录，并且可使用 --context-dir 将DbContext类搭建到与实体类型类的目录中：
    dotnet ef dbcontext scaffold &quot;Server=..;Port=3306;Database=...;Uid=root;Pwd=...;&quot; --context-dir Data --output-dir Models
6、默认情况下，命名空间将是根命名空加上项目根目录下任何子目录的名称。但是，从EFCore 5.0 开始，可使用 --namespace 覆盖所有输出类的命名空间。还可使用 --context-namespace 仅覆盖DbContext类的命名空间
    dotnet ef dbcontext scaffold &quot;Server=..;Port=3306;Database=...;Uid=root;Pwd=...;&quot;  --namespace your.namespace --context-namespace your.DbContext.Namespace    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、ef-多表sql-查询" tabindex="-1"><a class="header-anchor" href="#三、ef-多表sql-查询" aria-hidden="true">#</a> 三、EF 多表sql 查询</h2><p>1、创建一个实体类，把需要关联的字段写在这个类，并在实体类上添加<code>[keyless]</code>特性，表示该类没有主键。</p><div class="language-C# line-numbers-mode" data-ext="C#"><pre class="language-C#"><code>  [keyless]
  public class Test{
     public string  rolseName{get;set;}
     public string  ProjectName {get;set;}
     public string  neighborhoodName {get;set;}
     ....
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在EFDbcontent 上下文类中，添加 <code>DbSet&lt;Test&gt; Tests {get;set;}</code></p><div class="language-C# line-numbers-mode" data-ext="C#"><pre class="language-C#"><code>         public DbSet&lt;Test&gt; Tests { get; set; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、使用 EF 实现 多表关联sql 查询 实例</p><div class="language-C# line-numbers-mode" data-ext="C#"><pre class="language-C#"><code>    1、创建数据库对象 EFDbContext db   EF中\`$\`不能省略
     var d = _dbContext.Tests.FromSqlInterpolated($@&quot;select t1.\`ProjectName\`,t2.\`rolseName\`, t3.\`neighborhoodName\` from  \`a\` t1 
                        left  join   \`b\` t2 on t1.\`pointCode\` = t2.\`pointCode\`
                        left join \`c\` t3 on t3.\`neighborhoodId\` = t2.\`neighborhoodId\`&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据迁移-实现entity与数据库的映射" tabindex="-1"><a class="header-anchor" href="#数据迁移-实现entity与数据库的映射" aria-hidden="true">#</a> 数据迁移：实现Entity与数据库的映射</h2><p>数据库迁移，即将程序中DbContenxt的实体类，映射到数据库中。具体而言就是根据DbContext中的实体类，在数据库中创建表、更改表结构等（即根据Entity,在数据库中设计表）。 迁移主要用到两个命令：Add-Migration xxx 和 Update-Database.可通过vs自带的Package Manage Console 工具执行这两个命令完成迁移。<br> 1、 Add-Migration xxx 命令：添加迁移，xxx为描述性单词。如果数据库还没有创建，则会创建一个迁移文件夹Migration,迁移文件夹中包含迁移类和快照类。<br> 每次执行迁移文件夹中包含则会生成一个迁移类和快照类，每次执行Add-Migration 都会生成一个迁移类，而快照类只有一个。<br> 迁移类的代码，就是对应创建数据库的代码（或者更新数据库的代码）。<br> 2、Update-Database 命令：这个命令会使用迁移代码，将其转成sql语句，然后执行到目标数据库。执行成功后，数据库中的表就会和DbContext中的Entity一一对应。如果更新了DbContext中Entity的设计，则再此执行Add-Migration 和 Update-Database即可，此时会另外生成迁移类，但快照只有一个。</p><p>3、通过vs2022 迁移数据库</p><div class="language-bashe line-numbers-mode" data-ext="bashe"><pre class="language-bashe"><code> Add-Migration InitialDB
 Update-Database InitialDB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function p(h,x){const n=d("router-link"),s=d("ExternalLinkIcon");return r(),c("div",null,[m,e("nav",b,[e("ul",null,[e("li",null,[a(n,{to:"#目录"},{default:i(()=>[t("目录")]),_:1})]),e("li",null,[a(n,{to:"#一、-efcore数据库迁移命令"},{default:i(()=>[t("一、 EFCore数据库迁移命令")]),_:1})]),e("li",null,[a(n,{to:"#dotnet-安装-cli"},{default:i(()=>[t("dotnet 安装 CLI")]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#下面先列出两种方式对比-然后再分用vs-和vscode分别详细说明"},{default:i(()=>[t("下面先列出两种方式对比，然后再分用vs 和vscode分别详细说明")]),_:1})])])]),e("li",null,[a(n,{to:"#_1、-安装-donet-tool-工具"},{default:i(()=>[t("1、 安装 donet tool 工具")]),_:1})]),e("li",null,[a(n,{to:"#_2-跨平台命令行工具-command-line-interface-cli"},{default:i(()=>[t("2. 跨平台命令行工具 ,Command line interface (CLI)")]),_:1})]),e("li",null,[a(n,{to:"#二、ef-反向工程生成-model"},{default:i(()=>[t("二、EF 反向工程生成 Model")]),_:1})]),e("li",null,[a(n,{to:"#三、ef-多表sql-查询"},{default:i(()=>[t("三、EF 多表sql 查询")]),_:1})]),e("li",null,[a(n,{to:"#数据迁移-实现entity与数据库的映射"},{default:i(()=>[t("数据迁移：实现Entity与数据库的映射")]),_:1})])])]),v,e("p",null,[e("a",f,[t("EFCore数据库迁移命令"),a(s)])]),g])}const y=o(u,[["render",p],["__file","index.html.vue"]]);export{y as default};
