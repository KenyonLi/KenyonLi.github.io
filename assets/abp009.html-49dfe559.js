import{_ as s,r as l,o,c,a as e,b as a,w as d,d as i,e as r}from"./app-c1c3c937.js";const p={},u=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),i(" 目录")],-1),h={class:"table-of-contents"},b=e("h1",{id:"核心组件-用户组件-账户模块",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#核心组件-用户组件-账户模块","aria-hidden":"true"},"#"),i(" 核心组件-用户组件-账户模块")],-1),v={class:"custom-container tip"},m=e("p",{class:"custom-container-title"},"dotnet 源码",-1),g={href:"https://github.com/dotnet?WT.mc_id=dotnet-35129-website",target:"_blank",rel:"noopener noreferrer"},A=r('<h2 id="什么是账户模块" tabindex="-1"><a class="header-anchor" href="#什么是账户模块" aria-hidden="true">#</a> 什么是账户模块</h2><p>在ABP vNext项目集成登录，注册，就叫做账户模块</p><p>目的：在项目中使用账户目，主要是做身份验证用。</p><p>如果没有账户，对于用户无法验证，任何人都可以攻击</p><h2 id="在abp-vnext电商项目中如何集成账户模块" tabindex="-1"><a class="header-anchor" href="#在abp-vnext电商项目中如何集成账户模块" aria-hidden="true">#</a> 在ABP vNext电商项目中如何集成账户模块</h2><h3 id="账户模块源码" tabindex="-1"><a class="header-anchor" href="#账户模块源码" aria-hidden="true">#</a> 账户模块源码</h3><p>下载地址：</p>',7),f=e("br",null,null,-1),x={href:"https://github.com/abpframework/abp/tree/dev/modules/account",target:"_blank",rel:"noopener noreferrer"},y=r(`<p>源码介绍：</p><h3 id="lkn-ebusiness-application-contracts如何集成账户模块" tabindex="-1"><a class="header-anchor" href="#lkn-ebusiness-application-contracts如何集成账户模块" aria-hidden="true">#</a> LKN.EBusiness.Application.Contracts如何集成账户模块</h3><p>条件</p><p>1、Volo.Abp.Account.Application.Contracts</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>步骤

1、先在项目中通过Nuget下载

Volo.Abp.Account.Application.Contracts

2、然后在EBusinessApplicationContractsModule文件上增加

[DependsOn(
        typeof(AbpAccountApplicationContractsModule)
        )]
    public class EBusinessApplicationContractsModule: AbpModule
 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lkn-ebusiness-application如何集成账户模块" tabindex="-1"><a class="header-anchor" href="#lkn-ebusiness-application如何集成账户模块" aria-hidden="true">#</a> LKN.EBusiness.Application如何集成账户模块</h3><p>条件</p><p>1、Volo.Abp.Account.Application</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、先在项目中通过Nuget下载

Volo.Abp.Account.Application

2、然后在EBusinessApplicationModule文件上增加

[DependsOn(
        typeof(AbpAccountApplicationModule)
        )]
    public class EBusinessApplicationContractsModule: AbpModule

 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lkn-ebusiness-httpapi如何集成账户模块" tabindex="-1"><a class="header-anchor" href="#lkn-ebusiness-httpapi如何集成账户模块" aria-hidden="true">#</a> LKN.EBusiness.HttpApi如何集成账户模块</h3><p>条件</p><p>1、Volo.Abp.Account.HttpApi</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>步骤

1、先在项目中通过Nuget下载

Volo.Abp.Account.HttpApi

2、然后在EBusinessHttpApiModule文件上增加

[DependsOn(
        typeof(AbpAccountHttpApiModule)
        )]
    public class EBusinessApplicationContractsModule: AbpModule
 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口如何访问账户模块" tabindex="-1"><a class="header-anchor" href="#接口如何访问账户模块" aria-hidden="true">#</a> 接口如何访问账户模块？</h3><p>条件</p><p>1、LKN.EBusiness.HttpApi.Host</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>步骤

1、先启动LKN.EBusiness.HttpApi.Host

dotnet run 

2、或者直接vs启动
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="账户模块如何查询注册用户" tabindex="-1"><a class="header-anchor" href="#账户模块如何查询注册用户" aria-hidden="true">#</a> 账户模块如何查询注册用户？</h4><p>条件</p><p>1、AccountController</p><p>2、AccountAppService</p><p>3、IdentityUserManager</p><p>步骤</p><p>1、直接查询</p><h4 id="账户模块如何登录用户" tabindex="-1"><a class="header-anchor" href="#账户模块如何登录用户" aria-hidden="true">#</a> 账户模块如何登录用户？</h4><p>条件</p><p>1、AccountController</p><p>2、SignInManager</p><p>步骤</p><p>1、直接查询</p><h4 id="signinmanager登录用户原理" tabindex="-1"><a class="header-anchor" href="#signinmanager登录用户原理" aria-hidden="true">#</a> SignInManager登录用户原理？</h4><p>条件</p><p>1、Microsoft.AspNetCore.Identity</p><p>2、Microsoft.AspNetCore.Http</p><p>3、Microsoft.AspNetCore.Authentication</p><p>步骤</p><p>1、直接查询</p><h4 id="扩展-账户模块其他数据查询" tabindex="-1"><a class="header-anchor" href="#扩展-账户模块其他数据查询" aria-hidden="true">#</a> 扩展：账户模块其他数据查询？</h4><p>类似于原理如上</p><h3 id="lkn-ebusiness-web页面如何访问账户模块" tabindex="-1"><a class="header-anchor" href="#lkn-ebusiness-web页面如何访问账户模块" aria-hidden="true">#</a> LKN.EBusiness.Web页面如何访问账户模块？</h3><p>条件</p><p>1、Volo.Abp.Account.Web</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、先在项目中通过Nuget下载
Volo.Abp.Account.Web

2、然后在EBusinessApplicationModule文件上增加
[DependsOn(
	typeof(AbpAccountWebModule)
)]
 public class EBusinessWebModule: AbpModule
 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="账户模块如何在页面上展示登录页面" tabindex="-1"><a class="header-anchor" href="#账户模块如何在页面上展示登录页面" aria-hidden="true">#</a> 账户模块如何在页面上展示登录页面？</h4><p>条件</p><p>1、Login.cshtml</p><p>步骤</p><h4 id="扩展-账户模块如何在页面上展示用其他数据" tabindex="-1"><a class="header-anchor" href="#扩展-账户模块如何在页面上展示用其他数据" aria-hidden="true">#</a> 扩展：账户模块如何在页面上展示用其他数据？</h4><h3 id="oa系统如何调用账户模块" tabindex="-1"><a class="header-anchor" href="#oa系统如何调用账户模块" aria-hidden="true">#</a> OA系统如何调用账户模块</h3><p>条件</p><p>1、Volo.Abp.Account.HttpApi.Client</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>步骤
1、先在项目中通过Nuget下载
Volo.Abp.Account.HttpApi.Client

2、然后在LKN.OA文件上增加
 [DependsOn(
	typeof(AbpAccountHttpApiClientModule)
 )]
 public class OAModule: AbpModule
 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="oa系统调用用户模块原理" tabindex="-1"><a class="header-anchor" href="#oa系统调用用户模块原理" aria-hidden="true">#</a> OA系统调用用户模块原理？</h4><p>条件</p><p>1、动态代理</p><p>2、IOC</p><h3 id="分布式系统如何和identityserver集成" tabindex="-1"><a class="header-anchor" href="#分布式系统如何和identityserver集成" aria-hidden="true">#</a> 分布式系统如何和IdentityServer集成</h3><p>条件</p><p>1、Volo.Abp.Account.Web.IdentityServer</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>步骤
1、先在项目中通过Nuget下载
Volo.Abp.Account.Web.IdentityServer

2、然后在LKN.OA文件上增加
 [DependsOn(
	typeof(AbpAccountWebIdentityServerModule)
 )]
 public class OAModule: AbpModule
 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="账户模块设计思想" tabindex="-1"><a class="header-anchor" href="#账户模块设计思想" aria-hidden="true">#</a> 账户模块设计思想</h2><h3 id="为什么要把账户模块独立出来" tabindex="-1"><a class="header-anchor" href="#为什么要把账户模块独立出来" aria-hidden="true">#</a> 为什么要把账户模块独立出来？</h3><p>目的：为了复用账户模块。</p><h3 id="为什么要把账户模块和identitysearver集成" tabindex="-1"><a class="header-anchor" href="#为什么要把账户模块和identitysearver集成" aria-hidden="true">#</a> 为什么要把账户模块和IdentitySearver集成?</h3><p>目的：为了做分布式账户中心组件。</p><h2 id="用户模块设计思想" tabindex="-1"><a class="header-anchor" href="#用户模块设计思想" aria-hidden="true">#</a> 用户模块设计思想</h2><h3 id="用户模块层次设计" tabindex="-1"><a class="header-anchor" href="#用户模块层次设计" aria-hidden="true">#</a> 用户模块层次设计</h3><h4 id="领域层" tabindex="-1"><a class="header-anchor" href="#领域层" aria-hidden="true">#</a> 领域层</h4><h4 id="聚合根" tabindex="-1"><a class="header-anchor" href="#聚合根" aria-hidden="true">#</a> 聚合根</h4><h5 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> User</h5><p>用户聚合根</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>IdentityUser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(aggregate root): 聚合根</p><ul><li><code>IdentityUserRole</code> (collection): 用户角色实体</li><li><code>IdentityUserClaim</code> (collection): 用户声明实体</li><li><code>IdentityUserLogin</code> (collection): 用户登录实体</li><li><code>IdentityUserToken</code> (collection):用户token实体</li></ul><h5 id="role" tabindex="-1"><a class="header-anchor" href="#role" aria-hidden="true">#</a> Role</h5><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>IdentityRole
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(aggregate root): 聚合根</p><ul><li><code>IdentityRoleClaim</code> (collection):角色声明实体</li></ul></li></ul><h5 id="claim-type" tabindex="-1"><a class="header-anchor" href="#claim-type" aria-hidden="true">#</a> Claim Type</h5><ul><li><code>IdentityClaimType</code> (aggregate root): 聚合根</li></ul><h5 id="identity-security-log" tabindex="-1"><a class="header-anchor" href="#identity-security-log" aria-hidden="true">#</a> Identity Security Log</h5><ul><li><code>IdentitySecurityLog</code> (aggregate root):聚合根</li></ul><h5 id="organizationunit" tabindex="-1"><a class="header-anchor" href="#organizationunit" aria-hidden="true">#</a> OrganizationUnit</h5><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>OrganizationUnit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(aggregate root): 聚合根</p><ul><li><code>Roles</code> (collection): 组织角色</li></ul></li></ul><h4 id="仓储接口" tabindex="-1"><a class="header-anchor" href="#仓储接口" aria-hidden="true">#</a> 仓储接口</h4><p>根据领域类型创建的仓储接口</p><ul><li><code>IIdentityUserRepository</code></li><li><code>IIdentityRoleRepository</code></li><li><code>IIdentityClaimTypeRepository</code></li><li><code>IIdentitySecurityLogRepository</code></li><li><code>IOrganizationUnitRepository</code></li></ul><h4 id="领域服务" tabindex="-1"><a class="header-anchor" href="#领域服务" aria-hidden="true">#</a> 领域服务</h4><h5 id="user-manager" tabindex="-1"><a class="header-anchor" href="#user-manager" aria-hidden="true">#</a> User manager</h5><p><code>IdentityUserManager</code> 用户领域服务</p><h5 id="role-manager" tabindex="-1"><a class="header-anchor" href="#role-manager" aria-hidden="true">#</a> Role manager</h5><p><code>IdentityRoleManager</code> 角色领域服务</p><h5 id="claim-type-manager" tabindex="-1"><a class="header-anchor" href="#claim-type-manager" aria-hidden="true">#</a> Claim type manager</h5><p><code>IdenityClaimTypeManager</code>声明类型领域服务</p><h5 id="organization-unit-manager" tabindex="-1"><a class="header-anchor" href="#organization-unit-manager" aria-hidden="true">#</a> Organization unit manager</h5><p><code>OrganizationUnitManager</code>组织领域服务</p><h5 id="security-log-manager" tabindex="-1"><a class="header-anchor" href="#security-log-manager" aria-hidden="true">#</a> Security log manager</h5><p><code>IdentitySecurityLogManager</code> 安全日志领域服务</p><h3 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h3><h4 id="application-services" tabindex="-1"><a class="header-anchor" href="#application-services" aria-hidden="true">#</a> Application Services</h4><ul><li><code>IdentityUserAppService</code></li><li><code>IdentityRoleAppService</code></li><li><code>IdentityClaimTypeAppService</code></li><li><code>IdentitySettingsAppService</code></li><li><code>IdentityUserLookupAppService</code></li><li><code>ProfileAppService</code></li><li><code>IdentitySecurityLogAppService</code></li><li><code>OrganizationUnitAppService</code></li></ul><h3 id="database-providers" tabindex="-1"><a class="header-anchor" href="#database-providers" aria-hidden="true">#</a> Database Providers</h3>`,100),_={href:"https://docs.abp.io/en/abp/latest/Entity-Framework-Core",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.abp.io/en/abp/latest/MongoDB",target:"_blank",rel:"noopener noreferrer"},k=e("h4",{id:"entity-framework-core-仓储层",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#entity-framework-core-仓储层","aria-hidden":"true"},"#"),i(" Entity Framework Core（仓储层）")],-1),C={href:"https://www.nuget.org/packages/Volo.Abp.Identity.EntityFrameworkCore",target:"_blank",rel:"noopener noreferrer"},M=r('<h5 id="database-tables" tabindex="-1"><a class="header-anchor" href="#database-tables" aria-hidden="true">#</a> Database Tables</h5><ul><li>AbpRoles <ul><li>AbpRoleClaims</li></ul></li><li>AbpUsers <ul><li>AbpUserClaims</li><li>AbpUserLogins</li><li>AbpUserRoles</li><li>AbpUserTokens</li></ul></li><li><strong>AbpClaimTypes</strong></li><li>AbpOrganizationUnits <ul><li>AbpOrganizationUnitRoles</li><li>AbpUserOrganizationUnits</li></ul></li><li><strong>AbpSecurityLogs</strong></li></ul><h4 id="mongodb层" tabindex="-1"><a class="header-anchor" href="#mongodb层" aria-hidden="true">#</a> MongoDB层</h4>',3),U={href:"https://www.nuget.org/packages/Volo.Abp.Identity.MongoDB",target:"_blank",rel:"noopener noreferrer"},B=r('<h5 id="database-collections" tabindex="-1"><a class="header-anchor" href="#database-collections" aria-hidden="true">#</a> Database Collections</h5><ul><li><strong>AbpRoles</strong></li><li><strong>AbpUsers</strong></li><li><strong>AbpClaimTypes</strong></li><li><strong>AbpOrganizationUnits</strong></li><li><strong>AbpSecurityLogs</strong></li></ul><h3 id="账户模块模型设计" tabindex="-1"><a class="header-anchor" href="#账户模块模型设计" aria-hidden="true">#</a> 账户模块模型设计</h3><h4 id="用户表设计思想" tabindex="-1"><a class="header-anchor" href="#用户表设计思想" aria-hidden="true">#</a> 用户表设计思想</h4><p>User</p><p>模仿：人去车站上车</p><p>​ 人去动物园来动物</p><p>​ .....</p><p>需要一张票据，这个票据就是用户。</p><p>门票就是用户</p><p>不同的场景，用户的信息不一样，门票也不一样，为了适应不用的门票场景</p><p>所以：出现了用户声明，</p><h4 id="用户声明表设计思想" tabindex="-1"><a class="header-anchor" href="#用户声明表设计思想" aria-hidden="true">#</a> 用户声明表设计思想</h4><p>userclaims</p><p>在动物园，一张门票，只能访问大象，不能看老虎。</p><p>所以：就是对动物园各个动物设置了权限</p><p>同理：用户拿票访问系统，也需要做一些权限限制。</p><p>所以：就出现了角色表</p><h4 id="用户角色表设计思想" tabindex="-1"><a class="header-anchor" href="#用户角色表设计思想" aria-hidden="true">#</a> 用户角色表设计思想</h4><p>userroles</p><p>由于不同用户可能是相同的角色。所以就把用户角色抽出来，</p><p>形成了独立的角色表。为了能够复用</p><h4 id="角色表设计" tabindex="-1"><a class="header-anchor" href="#角色表设计" aria-hidden="true">#</a> 角色表设计</h4><p>roles</p><p>动物园的角色信息，可能会有一些时间限制，显示：管理员，最多只能人质3年。</p><p>所以：就使用roleclaims表</p><h4 id="角色声明表设计" tabindex="-1"><a class="header-anchor" href="#角色声明表设计" aria-hidden="true">#</a> 角色声明表设计</h4><p>roleclaims</p><p>再进行思考一下，用户也有声明，角色也有声明，用户和角色可能会共享一些角色</p><p>所以：就有了claimtypes表</p><h4 id="声明类型表设计" tabindex="-1"><a class="header-anchor" href="#声明类型表设计" aria-hidden="true">#</a> 声明类型表设计</h4><p>claimtypes</p><p>对于组织用户而言，公司用户都有相应的部门</p><p>所以：就有了用户部分表</p><p>由于不同用户可能属于同一个部门，所以，就有了部门表</p><h4 id="部门表" tabindex="-1"><a class="header-anchor" href="#部门表" aria-hidden="true">#</a> 部门表</h4><p>organizationunits</p><p>公司部门，去公司里面处理什么，都是有权限控制的。</p><p>所以：就有了部分角色表</p><h4 id="部门角色表" tabindex="-1"><a class="header-anchor" href="#部门角色表" aria-hidden="true">#</a> 部门角色表</h4><p>organizationunitroles</p><h4 id="扩展表-身份安全日志表" tabindex="-1"><a class="header-anchor" href="#扩展表-身份安全日志表" aria-hidden="true">#</a> 扩展表：身份安全日志表</h4><h4 id="扩展表-用户关联表" tabindex="-1"><a class="header-anchor" href="#扩展表-用户关联表" aria-hidden="true">#</a> 扩展表：用户关联表</h4><h3 id="如何根据表模型使用ddd进行设计" tabindex="-1"><a class="header-anchor" href="#如何根据表模型使用ddd进行设计" aria-hidden="true">#</a> 如何根据表模型使用DDD进行设计</h3><p>聚合根：</p><ul><li><strong>AbpRoles</strong></li><li><strong>AbpUsers</strong></li><li><strong>AbpClaimTypes</strong></li><li><strong>AbpOrganizationUnits</strong></li><li>AbpSecurityLogs</li></ul><p>每个根下面都有很多实体：</p>',47);function N(S,E){const n=l("router-link"),t=l("ExternalLinkIcon");return o(),c("div",null,[u,e("nav",h,[e("ul",null,[e("li",null,[a(n,{to:"#目录"},{default:d(()=>[i("目录")]),_:1})]),e("li",null,[a(n,{to:"#什么是账户模块"},{default:d(()=>[i("什么是账户模块")]),_:1})]),e("li",null,[a(n,{to:"#在abp-vnext电商项目中如何集成账户模块"},{default:d(()=>[i("在ABP vNext电商项目中如何集成账户模块")]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#账户模块源码"},{default:d(()=>[i("账户模块源码")]),_:1})]),e("li",null,[a(n,{to:"#lkn-ebusiness-application-contracts如何集成账户模块"},{default:d(()=>[i("LKN.EBusiness.Application.Contracts如何集成账户模块")]),_:1})]),e("li",null,[a(n,{to:"#lkn-ebusiness-application如何集成账户模块"},{default:d(()=>[i("LKN.EBusiness.Application如何集成账户模块")]),_:1})]),e("li",null,[a(n,{to:"#lkn-ebusiness-httpapi如何集成账户模块"},{default:d(()=>[i("LKN.EBusiness.HttpApi如何集成账户模块")]),_:1})]),e("li",null,[a(n,{to:"#接口如何访问账户模块"},{default:d(()=>[i("接口如何访问账户模块？")]),_:1})]),e("li",null,[a(n,{to:"#lkn-ebusiness-web页面如何访问账户模块"},{default:d(()=>[i("LKN.EBusiness.Web页面如何访问账户模块？")]),_:1})]),e("li",null,[a(n,{to:"#oa系统如何调用账户模块"},{default:d(()=>[i("OA系统如何调用账户模块")]),_:1})]),e("li",null,[a(n,{to:"#分布式系统如何和identityserver集成"},{default:d(()=>[i("分布式系统如何和IdentityServer集成")]),_:1})])])]),e("li",null,[a(n,{to:"#账户模块设计思想"},{default:d(()=>[i("账户模块设计思想")]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#为什么要把账户模块独立出来"},{default:d(()=>[i("为什么要把账户模块独立出来？")]),_:1})]),e("li",null,[a(n,{to:"#为什么要把账户模块和identitysearver集成"},{default:d(()=>[i("为什么要把账户模块和IdentitySearver集成?")]),_:1})])])]),e("li",null,[a(n,{to:"#用户模块设计思想"},{default:d(()=>[i("用户模块设计思想")]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#用户模块层次设计"},{default:d(()=>[i("用户模块层次设计")]),_:1})]),e("li",null,[a(n,{to:"#应用层"},{default:d(()=>[i("应用层")]),_:1})]),e("li",null,[a(n,{to:"#database-providers"},{default:d(()=>[i("Database Providers")]),_:1})]),e("li",null,[a(n,{to:"#账户模块模型设计"},{default:d(()=>[i("账户模块模型设计")]),_:1})]),e("li",null,[a(n,{to:"#如何根据表模型使用ddd进行设计"},{default:d(()=>[i("如何根据表模型使用DDD进行设计")]),_:1})])])])])]),b,e("div",v,[m,e("p",null,[e("a",g,[i("dotnet 源码 地址"),a(t)])])]),A,e("p",null,[i("https://github.com/abpframework/abp/tree/dev/modules/account"),f,e("a",x,[i("账户模块源码下载"),a(t)])]),y,e("p",null,[i("This module provides "),e("a",_,[i("Entity Framework Core"),a(t)]),i(" and "),e("a",I,[i("MongoDB"),a(t)]),i(" options for the database.")]),k,e("p",null,[e("a",C,[i("Volo.Abp.Identity.EntityFrameworkCore"),a(t)]),i(" NuGet package implements the EF Core integration.")]),M,e("p",null,[e("a",U,[i("Volo.Abp.Identity.MongoDB"),a(t)]),i(" NuGet package implements the MongoDB integration.")]),B])}const O=s(p,[["render",N],["__file","abp009.html.vue"]]);export{O as default};
