import{_ as d,r,o as c,c as p,a as e,b as s,w as i,d as n,e as l}from"./app-c1c3c937.js";const u="/images/jenkins/01/jenkins001_0004.png",k="/images/jenkins/01/jenkins001_0004_1.png",h="/images/jenkins/01/jenkins001_0005.png",m="/images/jenkins/01/jenkins001_0006.png",g="/images/jenkins/01/jenkins001_0007.png",b="/images/jenkins/01/jenkins001_0008.png",v="/images/jenkins/01/jenkins001_0009.png",f="/images/jenkins/01/jenkins001_0010.png",_="/images/jenkins/01/jenkins001_0011.png",j="/images/jenkins/01/jenkins001_0012.png",x="/images/jenkins/01/jenkins001_0013.png",G="/images/jenkins/01/jenkins001_0014.png",J="/images/jenkins/01/jenkins001_0015.png",w="/images/jenkins/01/jenkins001_0016.png",q="/images/jenkins/01/jenkins001_0017.png",A="/images/jenkins/01/jenkins001_0018.png",y="/images/jenkins/01/jenkins001_0019.png",o="/images/jenkins/01/jenkins001_0020.png",P="/images/jenkins/01/jenkins001_0022.png",R="/images/jenkins/01/jenkins001_0023.png",C="/images/jenkins/01/jenkins001_0001.png",S="/images/jenkins/01/jenkins001_0002.png",I="/images/jenkins/01/jenkins001_0003.png",E={},H=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),M={class:"table-of-contents"},N=l(`<h2 id="jenkins-安装部署" tabindex="-1"><a class="header-anchor" href="#jenkins-安装部署" aria-hidden="true">#</a> Jenkins 安装部署</h2><h2 id="jenkins环境准备" tabindex="-1"><a class="header-anchor" href="#jenkins环境准备" aria-hidden="true">#</a> Jenkins环境准备</h2><p>虚拟机：192.168.3.61 云主机：114.2.12.22</p><h2 id="jenkins-安装前提" tabindex="-1"><a class="header-anchor" href="#jenkins-安装前提" aria-hidden="true">#</a> Jenkins 安装前提</h2><p>JKD 1.11 安装<br> 先看看系统有没有安装jdk</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有，则需要先卸载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检索 yum中有没有1.11的相关安装包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum list java*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span>  <span class="token function">java</span> <span class="token parameter variable">-y</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看jdk版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jenkins安装" tabindex="-1"><a class="header-anchor" href="#jenkins安装" aria-hidden="true">#</a> Jenkins安装</h2><ol><li>下载 jenkins安装包</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://pkg.jenkins.io/redhat-stable/jenkins.io.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.安装jenkins</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、启动jenkins</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看jenkins状态，running说明启动成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jenkins配置" tabindex="-1"><a class="header-anchor" href="#jenkins配置" aria-hidden="true">#</a> Jenkins配置</h2><p>访问jenkins</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://192.168.1.61:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="激活页面" tabindex="-1"><a class="header-anchor" href="#激活页面" aria-hidden="true">#</a> 激活页面</h2><p><img src="`+u+'" alt="Alt text"></p><p>需要到centos9 服务器上 这个路径下找密钥 使用命令 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code><img src="'+k+'" alt="Alt text"></p><h2 id="激活成功" tabindex="-1"><a class="header-anchor" href="#激活成功" aria-hidden="true">#</a> 激活成功</h2><p><img src="'+h+'" alt="Alt text"></p><h2 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装" aria-hidden="true">#</a> 插件安装</h2><p><img src="'+m+'" alt="Alt text"></p><h2 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户" aria-hidden="true">#</a> 创建用户</h2><p><img src="'+g+'" alt="Alt text"></p><h2 id="实例配置" tabindex="-1"><a class="header-anchor" href="#实例配置" aria-hidden="true">#</a> 实例配置</h2><p><img src="'+b+'" alt="Alt text"></p><h2 id="配置完成" tabindex="-1"><a class="header-anchor" href="#配置完成" aria-hidden="true">#</a> 配置完成</h2><p><img src="'+v+`" alt="Alt text"></p><h2 id="jenkins使用前提" tabindex="-1"><a class="header-anchor" href="#jenkins使用前提" aria-hidden="true">#</a> Jenkins使用前提</h2><h2 id="git安装" tabindex="-1"><a class="header-anchor" href="#git安装" aria-hidden="true">#</a> git安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证是否安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> version 
<span class="token function">git</span> version <span class="token number">2.39</span>.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gitee注册" tabindex="-1"><a class="header-anchor" href="#gitee注册" aria-hidden="true">#</a> Gitee注册</h2><h2 id="注册-gitee-账号" tabindex="-1"><a class="header-anchor" href="#注册-gitee-账号" aria-hidden="true">#</a> 注册 Gitee 账号</h2><p>目前 Gitee 提供了面向个人开发者的「社区版」和面向企业研发团队的「企业版」服务，支持 Git/SVN 管理，提供代码审核、Bug 跟踪以及 Webhook 钩子回调等功能，开发者可以在 Gitee 自行创建仓库。</p><h2 id="通过访问-https-gitee-com-从首页右上角点击「注册」或点击「加入-gitee」即可注册个人账号。" tabindex="-1"><a class="header-anchor" href="#通过访问-https-gitee-com-从首页右上角点击「注册」或点击「加入-gitee」即可注册个人账号。" aria-hidden="true">#</a> 通过访问 https://gitee.com/，从首页右上角点击「注册」或点击「加入 Gitee」即可注册个人账号。</h2><p><img src="`+f+'" alt="Alt text"></p><p><img src="'+_+'" alt="Alt text"></p><p>在 Gitee 的注册界面依次填入各项，需注意的是：邮箱建议填写国内邮箱如163邮箱/QQ邮箱，以免因为众所周知的原因无法接收激活邮件，个性地址一经选定,无法修改，请慎重填写。当然，你也可以通过微信授权等第三方登录平台授权登录，授权登录后按照引导提示填写相关信息即可完成注册。</p><h2 id="企业用户" tabindex="-1"><a class="header-anchor" href="#企业用户" aria-hidden="true">#</a> 企业用户</h2><p>通过访问 https://gitee.com/enterprises，点击「免费开通企业账号」，在注册界面依次填入各项。</p><p><img src="'+j+'" alt="Alt text"></p><p><img src="'+x+'" alt="Alt text"></p><h2 id="jenkins部署项目" tabindex="-1"><a class="header-anchor" href="#jenkins部署项目" aria-hidden="true">#</a> Jenkins部署项目</h2><p>1、先创建仓储库 2、readme初始化 3、项目创建 4、现有远程选择</p><p><img src="'+G+'" alt="Alt text"><br> 可能会出现错误，无错误不用体会</p><p><img src="'+J+`" alt="Alt text"></p><p>打开项目所在的文件夹，选择Git Bash Here<br> 输入两句命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> origin master 
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新仓储库</p><h2 id="jenkins安装gitee插件" tabindex="-1"><a class="header-anchor" href="#jenkins安装gitee插件" aria-hidden="true">#</a> Jenkins安装Gitee插件</h2><p>在线安装 前往 Manage Jenkins -&gt; Manage Plugins -&gt; Available 右侧 Filter 输入： Gitee 下方可选列表中勾选 Gitee（如列表中不存在 Gitee，则点击 Check now 更新插件列表） 点击 Download now and install after restart</p><p><img src="`+w+'" alt="Alt text"></p><p>手动安装 从 release 列表中进入最新发行版，下载对应的 XXX.hpi 文件 前往 Manage Jenkins -&gt; Manage Plugins -&gt; Advanced Upload Plugin File 中选择刚才下载的 XXX.hpi 点击 Upload 后续页面中勾选 Restart Jenkins when installation is complete and no jobs are running</p><p><img src="'+q+'" alt="Alt text"></p><h3 id="添加gitee链接配置" tabindex="-1"><a class="header-anchor" href="#添加gitee链接配置" aria-hidden="true">#</a> 添加Gitee链接配置</h3><ol><li><p>前往 Jenkins -&gt; Manage Jenkins -&gt; Configure System -&gt; Gitee Configuration -&gt; Gitee connections</p></li><li><p>在 Connection name 中输入 Gitee 或者你想要的名字</p></li><li><p>Gitee host URL 中输入Gitee完整 URL地址： https://gitee.com （Gitee私有化客户输入部署的域名）</p></li><li><p><code> Credentials 中如还未配置Gitee APIV5 私人令牌，点击 Add - &gt; Jenkins</code></p></li><li><p>Domain 选择 Global credentials</p></li><li><p>Kind 选择 Gitee API Token</p></li><li><p>Scope 选择你需要的范围</p></li><li><p>Gitee API Token 输入你的Gitee私人令牌，获取地址：<code>https://gitee.com/profile/personal_access_tokens </code></p></li><li><p>ID, Descripiton 中输入你想要的 ID 和描述即可。</p></li><li><p>Credentials 选择配置好的 Gitee APIV5 Token</p></li><li><p>点击 Advanced ，可配置是否忽略 SSL 错误（视您的Jenkins环境是否支持），并可设置链接测超时时间（视您的网络环境而定）</p></li><li><p>点击 Test Connection 测试链接是否成功，如失败请检查以上 3，5，6 步骤。</p></li></ol><p>配置成功后如图所示：</p><p><img src="'+A+'" alt="Alt text"></p><h2 id="jenkins项目构建" tabindex="-1"><a class="header-anchor" href="#jenkins项目构建" aria-hidden="true">#</a> Jenkins项目构建</h2><h3 id="新建构建任务" tabindex="-1"><a class="header-anchor" href="#新建构建任务" aria-hidden="true">#</a> 新建构建任务</h3><p>前往 Jenkins -&gt; New Item , name 输入 ‘Gitee Test’，选择 Freestyle project 保存即可创建构建项目。</p><h3 id="任务全局配置" tabindex="-1"><a class="header-anchor" href="#任务全局配置" aria-hidden="true">#</a> 任务全局配置</h3><p>任务全局配置中需要选择前一步中的Gitee链接。前往某个任务（如’Gitee Test’）的 Configure -&gt; General，Gitee connection 中选择前面所配置的Gitee链接，如图：</p><p><img src="'+y+`" alt="Alt text"></p><h3 id="源码管理配置" tabindex="-1"><a class="header-anchor" href="#源码管理配置" aria-hidden="true">#</a> 源码管理配置</h3><p>前往某个任务（如’Gitee Test’）的 Configure -&gt; Source Code Management 选项卡</p><ol><li><p>点击 Git</p></li><li><p>输入你的仓库地址，例如</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://gitee.com/LearnKenyonLi/lkncicd.mircoservice.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+o+'" alt="Alt text"></p><h3 id="触发器配置" tabindex="-1"><a class="header-anchor" href="#触发器配置" aria-hidden="true">#</a> 触发器配置</h3><p>前往任务配置的触发器构建： Configure -&gt; Build Triggers 选项卡</p><p>1、<code>Enabled Gitee triggers 勾选您所需要的构建触发规则，如 Push Event,Opened Merge Request Events</code> ，勾选的事件会接受WebHook，触发构建。目前支持触发事件有：</p><ul><li>Push Events ：推送代码事件</li><li>Commit Comment Events ：评论提交记录事件</li><li>Opened Merge Request Events ：提交 PR 事件</li><li>Updated Merge Request Events ：更新 PR 事件</li><li>Accepted Merge Request Events ：接受/合并 PR 事件</li><li>Closed Merge Request Events ：关闭 PR 事件</li><li>Approved Pull Requests ： 审查通过 PR 事件</li><li>Tested Pull Requests ：测试通过 PR 事件</li></ul><p>2、Build Instruction Filter:</p><ul><li>None : 无过滤</li><li>[ci-skip] skip build ：commit message 或者 PR 说明包含 [ci-skip] 时，跳过构建触发。</li><li>[ci-build] trigger build ：commit message 或者 PR 说明包含 [ci-build] 时，触发构建。</li></ul><ol><li><p>Ignore last commit has build 该选项可以跳过已经构建过的 Commit 版本。</p></li><li><p>Cancel incomplete build on same Pull Requests 该选项在 PR 触发构建时，会判断是否存在相同 PR 且未完成的构建，有则取消未完成构建，再进行当前构建。</p></li><li><p>Ignore Pull Request conflicts 该选项在 PR 触发构建时，会根据 PR 冲突情况选择是否进行构建。</p></li><li><p>Allowed branches 可以配置允许构建的分支，目前支持分支名和正则表达式的方式进行过滤。</p></li><li><p>Secret Token for Gitee WebHook 该选项可以配置 WebHook 的密码，该密码需要与Gitee WebHook配置的密码一致方可触发构建。</p></li><li><p>注意：若 PR 状态为不可自动合并，则不触发构建。</p></li></ol><p><img src="'+P+'" alt="Alt text"></p><p><code>构建后步骤配置</code><br> 前往任务配置的构建后配置： Configure -&gt; Post-build Actions 选项卡</p><p>构建结果回评至Gitee<br> 点击 Add post-build action 下拉框选择：Add note with build status on Gitee pull requests</p><p><code>Advanced</code><br> 中可以配置：</p><p>Add message only for failed builds ：仅为构建失败回评到Gitee<br> 自定义各状态的回评内容（内容可以引用 Jenkins 的环境变量，或者自定义的环境变量）<br> 若开启该功能，还可将不可自动合并的状态回评至Gitee</p><p><code>构建成功自动合并PR</code></p><p>点击 Add post-build action 下拉框选择：Accept Gitee pull request on success</p><p><img src="'+R+`" alt="Alt text"></p><h2 id="jenkins项目构建镜像前提" tabindex="-1"><a class="header-anchor" href="#jenkins项目构建镜像前提" aria-hidden="true">#</a> Jenkins项目构建镜像前提</h2><h3 id="jenkins-root权限" tabindex="-1"><a class="header-anchor" href="#jenkins-root权限" aria-hidden="true">#</a> Jenkins root权限</h3><p>Jenkins 安装好后，会自动创建一个 jenkins 用户。jenkins 在构建工程时，默认的权限是不够写入文件的。这时就需要把它的权限提升为root。</p><p>1.将 jenkins 账号加入到 root 组中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gpasswd <span class="token parameter variable">-a</span> jenkins root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.修改<code>vim /etc/sysconfig/jenkins</code>文件，添加如下配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">JENKINS_USER</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span>
<span class="token assign-left variable">JENKINS_GROUP</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.重启 Jenkins</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">groups</span> jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看jenkins是在哪个用户组，显示的是root。</p><h3 id="jenkins增加目录权限" tabindex="-1"><a class="header-anchor" href="#jenkins增加目录权限" aria-hidden="true">#</a> Jenkins增加目录权限</h3><p>修改Jenkins相关文件夹用户权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> jenkins /var/jenkins_home/workspace/
<span class="token function">chown</span> <span class="token parameter variable">-R</span> jenkins /var/jenkins_home/auto_test/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启Jenkins（若是其他方式安装的jenkins则重启方式略不同</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart autotest-jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.给jenkins用户添加相应文件的权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> jenkins /root/YDT.MicroService/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="jenkin-docker权限" tabindex="-1"><a class="header-anchor" href="#jenkin-docker权限" aria-hidden="true">#</a> Jenkin Docker权限</h3><p>Jenkins在shell脚本运行docker权限报错解决 系统信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@lkn61 sysconfig<span class="token punctuation">]</span><span class="token comment"># id</span>
用户id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> 组id<span class="token operator">=</span><span class="token number">977</span><span class="token punctuation">(</span>docker<span class="token punctuation">)</span> 组<span class="token operator">=</span><span class="token number">977</span><span class="token punctuation">(</span>docker<span class="token punctuation">)</span>,0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> 上下文<span class="token operator">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker 信息 错误信息 能够在shell中使用docker version打印版本号，但是无法执行docker，报错信息如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+ <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> my-node-8 <span class="token parameter variable">-u</span> <span class="token number">0</span> <span class="token parameter variable">-v</span> /var/lib/jenkins/workspace/hexo-blogs:/usr/src/myapp <span class="token parameter variable">-w</span> /usr/src/myapp daocloud.io/node:8.0.0-alpine <span class="token function">node</span> <span class="token parameter variable">-v</span>
docker: Got permission denied <span class="token keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.38/containers/create?name<span class="token operator">=</span>my-node-8: dial unix /var/run/docker.sock: connect: permission denied.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复制</p><p>解决方法 将jenkins用户加入docker组 重启Jenkins服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> jenkins <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,124),W={href:"https://www.jb51.net/server/295484j1z.htm",target:"_blank",rel:"noopener noreferrer"},U=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> jenkins
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">666</span> /var/run/docker.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目" aria-hidden="true">#</a> 构建项目</h2><p>Jenkins添加shell脚本 <img src="`+o+`" alt="Alt text"><br> 脚本如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 进到 dockerfile文件目录</span>
<span class="token builtin class-name">cd</span> /var/lib/jenkins/workspace/LKN.CICD.MicroService/LKN.CICD.MicroService
<span class="token comment">#构建镜像</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> lkn.cicdmicroservice <span class="token builtin class-name">.</span> 
<span class="token comment">#删除容器</span>
<span class="token assign-left variable">containerId</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> -a<span class="token operator">|</span> <span class="token function">grep</span> project<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">\`</span></span>
 <span class="token builtin class-name">echo</span> <span class="token variable">$containerId</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$containerId</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
   <span class="token function">docker</span> stop <span class="token variable">$containerId</span>
   <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$containerId</span>
  <span class="token keyword">fi</span>
<span class="token comment">#运行容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">5005</span>:80 <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> lkn.cicdmicroservice  lkn.cicdmicroservice 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jenkins项目构建镜像webhook" tabindex="-1"><a class="header-anchor" href="#jenkins项目构建镜像webhook" aria-hidden="true">#</a> Jenkins项目构建镜像WebHook</h2><p>进入源码管理配置中设置的Gitee项目中，进入 管理 -&gt; WebHooks</p><ol><li>添加 WebHook， URL 填写 触发器配置：Build when a change is pushed to Gitee. Gitee webhook URL 中所示 URL，如：: http://127.0.0.1:8080/jenkins/project/fu</li><li>密码填写：触发器配置第 5 点中配置的 WebHook密码，不设密码可以不填</li><li>勾选 PUSH， Pull Request<br> ** 测试推送触发构建 **</li><li>Gitee的 WebHook 管理中选择勾选了PUSH的 WebHook 点击测试，观察 Jenkins 任务的构建状态</li><li>Gitee项目页面编辑一个文件提交，观察 Jenkins 任务的构建状态 测试PR触发构建</li><li>Gitee的 WebHook 管理中选择勾选了 Pull Request 的 WebHook 点击测试，观察 Jenkins 任务的构建状态</li><li>在Gitee项目中新建一个Pull Request，观察 Jenkins 任务的构建状态</li></ol><h2 id="重置密码" tabindex="-1"><a class="header-anchor" href="#重置密码" aria-hidden="true">#</a> 重置密码</h2>`,8),D={href:"https://blog.csdn.net/weixin_43820024/article/details/129873787",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.cnblogs.com/eddyz/p/17050566.html",target:"_blank",rel:"noopener noreferrer"},T=l(`<p>1、重中之重：先备份 Make a backup copy of a Jenkins config file (this step is important as after resetting the Jenkins admin password we would need to restore the previous settings):</p><p>首先第一步，修改之前先备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cp</span> /var/lib/jenkins/config.xml /var/lib/jenkins/config.xml.back
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、修改文件 打开配置文件： /var/lib/jenkins/config.xml ，禁止掉：and disable the security:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useSecurity</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>useSecurity</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、重启服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ systemctl restart jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、此时访问 jenkins，则不再需要密码 登录后做如下修改：</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>Go to the Jenkins UI (you won’t be asked for any credentials this time) and reset the admin password:</p><p>Navigate to &quot;Manage Jenkins&quot; -&gt; &quot;Security&quot; -&gt; &quot;Configure Global Security&quot; -&gt; &quot;Authentication&quot; Select the &quot;Security Realm&quot; (e.g. &quot;Jenkins’ own user database&quot;) and click on &quot;Save&quot; Go to &quot;People&quot; -&gt; Click on a username for which you want to change the password (e.g. admin) -&gt; &quot;Configure&quot; -&gt; Enter a new password in the &quot;Password&quot; and &quot;Confirm password&quot; fields and click on &quot;Save&quot;</p></div><p><img src="`+C+'" alt="Alt text"></p><p><img src="'+S+'" alt="Alt text"></p><p><img src="'+I+`" alt="Alt text"></p><p>5、修改完成后，恢复之前备份的xml，重启服务 Once the admin password is reset, restore the previous /var/lib/jenkins/config.xml file and restart Jenkins:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mv</span> /var/lib/jenkins/config.xml.back /var/lib/jenkins/config.xml
$ systemctl restart jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function $(B,F){const a=r("router-link"),t=r("ExternalLinkIcon");return c(),p("div",null,[H,e("nav",M,[e("ul",null,[e("li",null,[s(a,{to:"#目录"},{default:i(()=>[n("目录")]),_:1})]),e("li",null,[s(a,{to:"#jenkins-安装部署"},{default:i(()=>[n("Jenkins 安装部署")]),_:1})]),e("li",null,[s(a,{to:"#jenkins环境准备"},{default:i(()=>[n("Jenkins环境准备")]),_:1})]),e("li",null,[s(a,{to:"#jenkins-安装前提"},{default:i(()=>[n("Jenkins 安装前提")]),_:1})]),e("li",null,[s(a,{to:"#jenkins安装"},{default:i(()=>[n("Jenkins安装")]),_:1})]),e("li",null,[s(a,{to:"#jenkins配置"},{default:i(()=>[n("Jenkins配置")]),_:1})]),e("li",null,[s(a,{to:"#激活页面"},{default:i(()=>[n("激活页面")]),_:1})]),e("li",null,[s(a,{to:"#激活成功"},{default:i(()=>[n("激活成功")]),_:1})]),e("li",null,[s(a,{to:"#插件安装"},{default:i(()=>[n("插件安装")]),_:1})]),e("li",null,[s(a,{to:"#创建用户"},{default:i(()=>[n("创建用户")]),_:1})]),e("li",null,[s(a,{to:"#实例配置"},{default:i(()=>[n("实例配置")]),_:1})]),e("li",null,[s(a,{to:"#配置完成"},{default:i(()=>[n("配置完成")]),_:1})]),e("li",null,[s(a,{to:"#jenkins使用前提"},{default:i(()=>[n("Jenkins使用前提")]),_:1})]),e("li",null,[s(a,{to:"#git安装"},{default:i(()=>[n("git安装")]),_:1})]),e("li",null,[s(a,{to:"#gitee注册"},{default:i(()=>[n("Gitee注册")]),_:1})]),e("li",null,[s(a,{to:"#注册-gitee-账号"},{default:i(()=>[n("注册 Gitee 账号")]),_:1})]),e("li",null,[s(a,{to:"#通过访问-https-gitee-com-从首页右上角点击「注册」或点击「加入-gitee」即可注册个人账号。"},{default:i(()=>[n("通过访问 https://gitee.com/，从首页右上角点击「注册」或点击「加入 Gitee」即可注册个人账号。")]),_:1})]),e("li",null,[s(a,{to:"#企业用户"},{default:i(()=>[n("企业用户")]),_:1})]),e("li",null,[s(a,{to:"#jenkins部署项目"},{default:i(()=>[n("Jenkins部署项目")]),_:1})]),e("li",null,[s(a,{to:"#jenkins安装gitee插件"},{default:i(()=>[n("Jenkins安装Gitee插件")]),_:1}),e("ul",null,[e("li",null,[s(a,{to:"#添加gitee链接配置"},{default:i(()=>[n("添加Gitee链接配置")]),_:1})])])]),e("li",null,[s(a,{to:"#jenkins项目构建"},{default:i(()=>[n("Jenkins项目构建")]),_:1}),e("ul",null,[e("li",null,[s(a,{to:"#新建构建任务"},{default:i(()=>[n("新建构建任务")]),_:1})]),e("li",null,[s(a,{to:"#任务全局配置"},{default:i(()=>[n("任务全局配置")]),_:1})]),e("li",null,[s(a,{to:"#源码管理配置"},{default:i(()=>[n("源码管理配置")]),_:1})]),e("li",null,[s(a,{to:"#触发器配置"},{default:i(()=>[n("触发器配置")]),_:1})])])]),e("li",null,[s(a,{to:"#jenkins项目构建镜像前提"},{default:i(()=>[n("Jenkins项目构建镜像前提")]),_:1}),e("ul",null,[e("li",null,[s(a,{to:"#jenkins-root权限"},{default:i(()=>[n("Jenkins root权限")]),_:1})]),e("li",null,[s(a,{to:"#jenkins增加目录权限"},{default:i(()=>[n("Jenkins增加目录权限")]),_:1})]),e("li",null,[s(a,{to:"#jenkin-docker权限"},{default:i(()=>[n("Jenkin Docker权限")]),_:1})])])]),e("li",null,[s(a,{to:"#构建项目"},{default:i(()=>[n("构建项目")]),_:1})]),e("li",null,[s(a,{to:"#jenkins项目构建镜像webhook"},{default:i(()=>[n("Jenkins项目构建镜像WebHook")]),_:1})]),e("li",null,[s(a,{to:"#重置密码"},{default:i(()=>[n("重置密码")]),_:1})])])]),N,e("p",null,[e("a",W,[n("参考"),s(t)]),n(" dokcer 权限不够")]),U,e("p",null,[e("a",D,[n("重置 Jenkins 管理员密码-参考"),s(t)]),e("a",L,[n("重置 Jenkins 管理员密码-参考"),s(t)])]),T])}const V=d(E,[["render",$],["__file","jenkins001.html.vue"]]);export{V as default};
