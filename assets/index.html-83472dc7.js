import{_ as d,r,o as c,c as o,a as e,b as n,w as t,d as a,e as l}from"./app-c1c3c937.js";const u="/images/git/git_0001image.png",p="/images/git/git_0002image.png",g="/images/git/git_0003image.png",b="/images/git/gitindex_001image.png",v={},m=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),h={class:"table-of-contents"},k=l(`<h2 id="git-常用命令" tabindex="-1"><a class="header-anchor" href="#git-常用命令" aria-hidden="true">#</a> git 常用命令</h2><div class="custom-container tip"><p class="custom-container-title">清空git缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">GitHub创建命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;# 你的介绍&quot;</span> <span class="token operator">&gt;&gt;</span> README.md

<span class="token function">git</span> init

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;提交日志&quot;</span>

<span class="token function">git</span> remote <span class="token function">add</span> origin 仓库地址

<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="git和github新手安装使用教程-三步入门" tabindex="-1"><a class="header-anchor" href="#git和github新手安装使用教程-三步入门" aria-hidden="true">#</a> git和github新手安装使用教程（三步入门）</h2>`,4),f={href:"https://www.cnblogs.com/ttjsndx/p/7943444.html",target:"_blank",rel:"noopener noreferrer"},x=e("h3",{id:"一-初始化本地仓库git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一-初始化本地仓库git","aria-hidden":"true"},"#"),a(" 一：初始化本地仓库git")],-1),_={href:"https://gitforwindows.org/",target:"_blank",rel:"noopener noreferrer"},q=e("blockquote",null,[e("p",null,[a("2.新建一个文件夹repo作为本地仓库，右键，选择Git Init here。注意：有的版本没有"),e("code",null,"git init here"),a(" ,则选择git bash here ,在打开的页面中输入git init")])],-1),y=e("blockquote",null,[e("blockquote",null,[e("p",null,"第一步的结果就是：（1）在安装的时候自动配置了git运行环境。（2）通过git init 在指定文件夹生成了隐藏的 .git 文件夹。用于保存本地仓库版本的相关信息（版本信息，仓库信息，git命令编译规则等）")])],-1),E=e("h3",{id:"二-将自己的电脑与指定github账户关联",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二-将自己的电脑与指定github账户关联","aria-hidden":"true"},"#"),a(" 二：将自己的电脑与指定github账户关联")],-1),A={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},S=l(`<blockquote><p>2.在本机上设置你的github的邮箱和用户名\`</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;用户名&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;邮箱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.生成本机的<code>SSH key</code></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;邮箱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><blockquote><p>按三次回车键，最后会生成ssh key值，并告诉你key值存放的文件的位置，找到该文件并复制ssh key</p></blockquote></div><blockquote><p>4.打开你的github主页。找到Settings,选择SSH and GPG keys ，再选择new SSH key，title 随意填，key值就是刚刚生成的本机 SSH KEY</p></blockquote><p><img src="`+u+'" alt="Alt text"><img src="'+p+`" alt="Alt text"></p><blockquote><p>第二步设置了本地git与github之间通信的密码，github账户只接受合法的SSH KEY 对其下项目进行修改。</p></blockquote><h3 id="三-将自己的仓库与github上的某个项目关联" tabindex="-1"><a class="header-anchor" href="#三-将自己的仓库与github上的某个项目关联" aria-hidden="true">#</a> 三：将自己的仓库与github上的某个项目关联</h3><blockquote><p>1.打开github主页，选择 new repository,打开新建项目页面。</p></blockquote><blockquote><blockquote><p>在新建项目页面，输入项目名称，点击下一步，复制生成项目后的项目SSH</p></blockquote></blockquote><blockquote><p>2.打开本地仓库的git bash页面。输入</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token string">&quot;项目SSH&quot;</span>
<span class="token comment">## 删除 现有远程的git地址 </span>
<span class="token function">git</span> remote remove origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.先同步github上master分支的代码，再指定上传的默认分支</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin master
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><blockquote><p>第三步设置了本地仓库对应的是github账户上的哪一个项目，并且设置了代码上传的分支。注意github上的项目名称与本地仓库名称同级，也就是说，从github上同步代码时，只会更新项目名称下的各个文件到本地仓库中。</p></blockquote></blockquote><blockquote><blockquote><p>以上就是安装配置github的全部过程，以下为github最常用的命令</p></blockquote></blockquote><table><thead><tr><th style="text-align:center;">编号</th><th style="text-align:left;">命令</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">git status</td><td style="text-align:left;">查看仓库的改变情况，会有相关的提示操作出现</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">git add -A</td><td style="text-align:left;">直接添加所有改动的文件</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">git commit -m &quot;note&quot;</td><td style="text-align:left;">确认生成本地的版本，note是 版本特点说明</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">git push</td><td style="text-align:left;">将改动上传到github，若没有指定分支，则需要使用git push origin master</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">git log</td><td style="text-align:left;">查看版本更新情况</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">git reset -hard x</td><td style="text-align:left;">回退到某个本地版本,x为git log中出现的hash值的前七位</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:left;">git clean -xf</td><td style="text-align:left;">清除所有的未提交文件</td></tr></tbody></table><h2 id="git-fetch和git-pull的区别" tabindex="-1"><a class="header-anchor" href="#git-fetch和git-pull的区别" aria-hidden="true">#</a> git fetch和git pull的区别</h2>`,19),H={href:"https://www.jianshu.com/p/c89eb2a6b917",target:"_blank",rel:"noopener noreferrer"},w=l('<h3 id="_1、简单概括" tabindex="-1"><a class="header-anchor" href="#_1、简单概括" aria-hidden="true">#</a> 1、简单概括</h3><blockquote><p>而git pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。 下面我们来详细了解一下git fetch和git pull的用法。</p></blockquote><p><img src="'+g+`" alt="Alt text"></p><blockquote><h2 id="_2、分支的概念" tabindex="-1"><a class="header-anchor" href="#_2、分支的概念" aria-hidden="true">#</a> 2、分支的概念</h2></blockquote><p>在介绍两种方法之前，我们需要先了解一下分支的概念： 分支是用来标记特定代码的提交，每一个分支通过SHA1sum值来标识，所以对分支的操作是轻量级的，你改变的仅仅是SHA1sum值。</p><p>如下图所示，当前有2个分支，A,C,E属于master分支，而A,B，D,F属于dev分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> A----C----E（master）
  <span class="token punctuation">\\</span>
   B---D---F<span class="token punctuation">(</span>dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的head指针分别指向E和F，对上述做如下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master  //选择or切换到master分支
<span class="token function">git</span> merge dev        //将dev分支合并到当前分支<span class="token punctuation">(</span>master<span class="token punctuation">)</span>中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>合并完成之后：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>A---C---E---G<span class="token punctuation">(</span>master<span class="token punctuation">)</span>
 <span class="token punctuation">\\</span>         /
  B---D---F（dev）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在ABCDEFG属于master，G是一次合并后的结果，是将E和Ｆ的代码合并后的结果，可能会出现冲突。而ABDF依然属于dev分支。可以继续在dev的分支上进行开发:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>A---C---E---G---H<span class="token punctuation">(</span>master<span class="token punctuation">)</span>
 <span class="token punctuation">\\</span>         /
  B---D---F---I（dev）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>分支（branch）的基本操作：</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch //查看本地所有分支 

<span class="token function">git</span> branch <span class="token parameter variable">-r</span> //查看远程所有分支

<span class="token function">git</span> branch <span class="token parameter variable">-a</span> //查看本地和远程的所有分支

<span class="token function">git</span> branch <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> //新建分支

<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> //删除本地分支

<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span> //删除远程分支，删除后还需推送到服务器
<span class="token function">git</span> push origin:<span class="token operator">&lt;</span>branchname<span class="token operator">&gt;</span>  //删除后推送至服务器

<span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>oldbranch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>newbranch<span class="token operator">&gt;</span> //重命名本地分支
/**
*重命名远程分支：
*1、删除远程待修改分支
*2、push本地新分支到远程服务器
*/

//git中一些选项解释:

<span class="token parameter variable">-d</span>
--delete：删除

<span class="token parameter variable">-D</span>
<span class="token parameter variable">--delete</span> --force的快捷键

<span class="token parameter variable">-f</span>
--force：强制

<span class="token parameter variable">-m</span>
--move：移动或重命名

<span class="token parameter variable">-M</span>
<span class="token parameter variable">--move</span> --force的快捷键

<span class="token parameter variable">-r</span>
--remote：远程

<span class="token parameter variable">-a</span>
--all：所有
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、git fetch 用法 git fetch 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> //这个命令将某个远程主机的更新全部取回本地
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只想取回特定分支的更新，可以指定分支名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; //注意之间有空格
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最常见的命令如取回origin 主机的master 分支：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git fetch origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git log -p FETCH_HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到返回的信息包括更新的文件名，更新的作者和时间，以及更新的代码（19行红色[删除]和绿色[新增]部分）。 我们可以通过这些信息来判断是否产生冲突，以确定是否将更新merge到当前分支。</p><p>4、git pull用法 前面提到，git pull 的过程可以理解为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git fetch origin master //从远程主机的master分支拉取最新内容 
git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git pull origin next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git下载指定分支代码到本地" tabindex="-1"><a class="header-anchor" href="#git下载指定分支代码到本地" aria-hidden="true">#</a> git下载指定分支代码到本地</h3><p>任务一：下载地址为git@e.coding.net:lkn-microservices/LKN-MicroServices.git；分支名为dev</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> 分支名 网址.git 
$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> lesson-2 git@e.coding.net:lkn-microservices/LKN-MicroServices.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-合并分支" tabindex="-1"><a class="header-anchor" href="#git-合并分支" aria-hidden="true">#</a> git 合并分支</h3>`,34),D={href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/branching-merging/merging",target:"_blank",rel:"noopener noreferrer"},C=l('<h4 id="整合分支-不是简单提交" tabindex="-1"><a class="header-anchor" href="#整合分支-不是简单提交" aria-hidden="true">#</a> 整合分支-不是简单提交</h4><p>在开始准备合并时，你不必（当然也不能）把那些要整合的改动打包为一个单独的提交。相反，你要告诉git,你想要和那个分支（branch）进行整合，git会从那个分支中判断出哪些提交还没有被整合到你当前工作的HEAD分支中。只有这些提交才能被整合进来。</p><p>此外，你不需要去考虑这些改动最终会到了哪里，整合的目标永远是你的当前的 HEAD 分支，也就是你的工作副本 <img src="'+b+`" alt="Alt text"> 在 Git 中，进行合并是非常简单方便的。它只需要两个步骤：</p><p>（1） 切换到那个需要接收改动的分支上。 （2） 执行 “git merge” 命令，并且在后面加上那个将要合并进来的分支的名称。 来让我们把 “contact-form” 分支的改动合并到 “master” 中去：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master
$ <span class="token function">git</span> merge contact-form
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git创建分支错误提示-fatal-not-a-valid-object-name-master" tabindex="-1"><a class="header-anchor" href="#git创建分支错误提示-fatal-not-a-valid-object-name-master" aria-hidden="true">#</a> git创建分支错误提示 fatal: Not a valid object name: &#39;master&#39;.</h2>`,6),$={href:"https://blog.csdn.net/ion_L/article/details/82686231",target:"_blank",rel:"noopener noreferrer"},F=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch 微服务注册
fatal: not a valid object name: <span class="token string">&#39;master&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>究其原因，是由于刚创建的git仓库默认的master分支要在第一次有效的commit之后才会真正建立，否则就像你声明了个对象但没初始化一样。</p></blockquote>`,2);function B(G,j){const s=r("router-link"),i=r("ExternalLinkIcon");return c(),o("div",null,[m,e("nav",h,[e("ul",null,[e("li",null,[n(s,{to:"#目录"},{default:t(()=>[a("目录")]),_:1})]),e("li",null,[n(s,{to:"#git-常用命令"},{default:t(()=>[a("git 常用命令")]),_:1})]),e("li",null,[n(s,{to:"#git和github新手安装使用教程-三步入门"},{default:t(()=>[a("git和github新手安装使用教程（三步入门）")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#一-初始化本地仓库git"},{default:t(()=>[a("一：初始化本地仓库git")]),_:1})]),e("li",null,[n(s,{to:"#二-将自己的电脑与指定github账户关联"},{default:t(()=>[a("二：将自己的电脑与指定github账户关联")]),_:1})]),e("li",null,[n(s,{to:"#三-将自己的仓库与github上的某个项目关联"},{default:t(()=>[a("三：将自己的仓库与github上的某个项目关联")]),_:1})])])]),e("li",null,[n(s,{to:"#git-fetch和git-pull的区别"},{default:t(()=>[a("git fetch和git pull的区别")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#_1、简单概括"},{default:t(()=>[a("1、简单概括")]),_:1})]),e("li",null,[n(s,{to:"#git下载指定分支代码到本地"},{default:t(()=>[a("git下载指定分支代码到本地")]),_:1})]),e("li",null,[n(s,{to:"#git-合并分支"},{default:t(()=>[a("git 合并分支")]),_:1})])])]),e("li",null,[n(s,{to:"#git创建分支错误提示-fatal-not-a-valid-object-name-master"},{default:t(()=>[a("git创建分支错误提示 fatal: Not a valid object name: 'master'.")]),_:1})])])]),k,e("p",null,[e("a",f,[a("参考"),n(i)])]),x,e("blockquote",null,[e("p",null,[a("1.下载一个git吧 "),e("a",_,[a("下载链接"),n(i)]),a(" ，根据提示安装git")])]),q,y,E,e("blockquote",null,[e("p",null,[a("1.创建一个github账户吧 "),e("a",A,[a("创建地址"),n(i)])])]),S,e("p",null,[e("a",H,[a("git fetch和git pull的区别"),n(i)])]),w,e("p",null,[e("a",D,[a("合并改动 参考"),n(i)])]),C,e("p",null,[e("a",$,[a("git创建分支错误提示"),n(i)])]),F])}const L=d(v,[["render",B],["__file","index.html.vue"]]);export{L as default};
